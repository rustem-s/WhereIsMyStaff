package kz.pio.whereismystuff.common;

import com.google.gson.Gson;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

/**
 * Utils
 * @version 20140614
 * @author Rustem S
 */
public class Util {
    public static String NO_PHOTO_BASE64 = "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";

    /**
     * Checking for authentication session
     */
    public static boolean userAuthenticated() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        return (auth != null && auth.isAuthenticated() && !(auth.getName().equals("anonymousUser")));
    }

    /**
     * Get the name of the current user
     */
    public static String getAuthenticatedUsername() {
        return SecurityContextHolder.getContext().getAuthentication().getName();
    }

    /**
     * User authentication
     */
    public static void authenticateUser(String username) {
        Authentication authentication = new UsernamePasswordAuthenticationToken(username, null, AuthorityUtils.createAuthorityList("ROLE_USER"));
        SecurityContextHolder.getContext().setAuthentication(authentication);
    }

    /**
     * Get current HttpSession
     */
    public static HttpSession session() {
        ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
        return attr.getRequest().getSession(true); // true == allow create
    }

    /**
     * JSON parser
     */
    public static String getElementFromJson(String json, String element) {
        Gson gson = new Gson();
        Map<String, String> map = gson.fromJson(json, HashMap.class);
        return map.get(element);
    }
}
